{
	"nodes":[
		{"type":"text","text":"# project/students/api.py","id":"5626776e3e94f1af","x":-1700,"y":-360,"width":740,"height":60},
		{"type":"text","text":"# project/exercises/api.py","id":"4e375d4156f28746","x":-1720,"y":-240,"width":760,"height":80},
		{"type":"text","text":"# project/assessments/api.py","id":"afdebc6c6cf94f3c","x":-1760,"y":-115,"width":800,"height":75},
		{"type":"text","text":"# project/staff/api.py\n\n- Defining viewset class:\n```python \n\nfrom api.views import NoDestroyModelViewSet\nfrom staff.models import StaffMember\n\nfrom . import serializers\n\n\nclass StaffMemberViewSet(NoDestroyModelViewSet):\n    \"\"\"API for `staff.StaffMember`.\"\"\"\n\n    queryset = StaffMember.objects.none()\n    serializer_classes = [\n        serializers.StaffMemberListSerializer,\n        serializers.StaffMemberSerializer,\n    ]\n\n    def get_queryset(self):\n        if self.request.user.is_staff:\n            f = {}\n        else:\n            f = {\"staffing__status\": \"published\"}\n        return (StaffMember\n                .objects\n                .filter(staffing__cohort=self.request.cohort, **f)\n                .order_by('username')\n                .all())\n\n```\n\n- Serialization? This is needed in order to send JSON response. REST Framework helps make this easier!\n\n- `NoDestroyModelViewSet`?? This is a class defined in `project/api/views.py` that provides several default CRUD-style actions for a given route.","id":"fbc8f1f170cf3496","x":-1320,"y":-2360,"width":1060,"height":1480},
		{"type":"text","text":"# project/api/urls.py \n\n- APIs for each model are imported here:\n\n```python\n\nfrom assessments import api as assessments_api\n\nfrom assets import api as assets_api\n\nfrom courses import api as courses_api\n\nfrom events import api as events_api\n\n#...etc\n\n\n```\n\n\n\n- Our routers live here:\n\n``` python \n\nrouter.register(\"assessmentsessions\", assessments_api.AssessmentSessionViewSet)\n\nrouter.register(\"assets\", assets_api.AssetViewSet)\n\nrouter.register(\"cohorts\", courses_api.CohortViewSet)\n\nrouter.register(\"events\", events_api.EventViewSet)\n\n# ...etc\n```\n\nRouters take viewset as a argument (_What's a viewset?_ It's a django REST framework idiom that allows us to group related views in a single class)\n\n[[Routers Overview - Generate Routes]]\n\n","id":"a858eefeaa7e6034","x":-560,"y":-300,"width":960,"height":1440},
		{"type":"text","text":"# project/api/views.py\n\n- Main class for default viewsets are created here:\n\n```python \n\nfrom rest_framework import mixins\nfrom rest_framework.viewsets import GenericViewSet\n\n\nclass SISApiBaseViewSet(GenericViewSet):\n    \"\"\"Add select-serializer class feature to viewsets.\"\"\"\n\n    @property\n    def serializer_classes(self):  # pragma: no cover\n        raise NotImplementedError(\"ViewSet needs `serializer_classes`\")\n\n    def get_serializer_class(self):\n        \"\"\"Use less info when just listing items.\"\"\"\n\n        lst, detail = self.serializer_classes\n        return lst if self.action == \"list\" else detail\n\n\n# noinspection PyAbstractClass\nclass NoDestroyModelViewSet(mixins.CreateModelMixin,\n                            mixins.RetrieveModelMixin,\n                            mixins.UpdateModelMixin,\n                            # mixins.DestroyModelMixin,\n                            mixins.ListModelMixin,\n                            SISApiBaseViewSet):\n    \"\"\"\n    A viewset that provides default `create()`, `retrieve()`, `update()`,\n    `partial_update()` and `list()` actions.\n    \"\"\"\n\n```\n\n- \"No destroy\"? These routes don't come w/ delete by default. ","id":"e3e5375ef9f987fa","x":1600,"y":-440,"width":1280,"height":1520},
		{"type":"text","text":"# project/staff/serializers.py\n\n- The response cannot natively handle Django model instances... they need to be serialized!\n- This file contains schema for response + helps link model/determine what instances should be returned by request\n\n```python \n\nfrom rest_framework import serializers\n\nfrom staff.models import StaffMember\n\n\nclass StaffMemberListSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = StaffMember\n        fields = [\"full_name\", \"api_url\"]\n\n\nclass StaffMemberSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = StaffMember\n        fields = [\n            \"username\",\n            \"first_name\",\n            \"last_name\",\n            \"pronunciation\",\n            \"nickname\",\n            \"formal_name\",\n            \"pronoun\",\n            \"bio\",\n            \"photo\",\n            \"location\",\n            \"api_url\",\n        ]\n\n\n```","id":"1bd354493bc6eb3a","x":-1480,"y":-4280,"width":1520,"height":1480},
		{"type":"text","text":"# ...etc","id":"27eca4ba9a9dff77","x":-1720,"y":40,"width":640,"height":100}
	],
	"edges":[
		{"id":"0f6fddfd20898d0e","fromNode":"a858eefeaa7e6034","fromSide":"left","toNode":"afdebc6c6cf94f3c","toSide":"right"},
		{"id":"077f5f8c149adc27","fromNode":"a858eefeaa7e6034","fromSide":"left","toNode":"4e375d4156f28746","toSide":"right"},
		{"id":"4c017f4f8810d947","fromNode":"a858eefeaa7e6034","fromSide":"left","toNode":"5626776e3e94f1af","toSide":"right"},
		{"id":"06451a0077e8f6ac","fromNode":"a858eefeaa7e6034","fromSide":"top","toNode":"fbc8f1f170cf3496","toSide":"bottom"},
		{"id":"f483c0efd87eac9e","fromNode":"fbc8f1f170cf3496","fromSide":"right","toNode":"e3e5375ef9f987fa","toSide":"top"},
		{"id":"e5cd03754a64225a","fromNode":"a858eefeaa7e6034","fromSide":"left","toNode":"27eca4ba9a9dff77","toSide":"right"},
		{"id":"aeba10eff4881457","fromNode":"fbc8f1f170cf3496","fromSide":"top","toNode":"1bd354493bc6eb3a","toSide":"bottom"},
		{"id":"24f904668458d726","fromNode":"a858eefeaa7e6034","fromSide":"right","toNode":"e3e5375ef9f987fa","toSide":"left"}
	]
}