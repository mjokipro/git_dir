{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","common/Alert.js","auth/LoginForm.js","api/api.js","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","movies/MovieDetail.js","movies/MovieCard.js","movies/MovieList.js","routes-nav/Routes.js","common/LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","item","setItem","useState","useEffect","console","debug","removeItem","UserContext","React","createContext","FeatureWrapper","styled","nav","_templateObject","_taggedTemplateLiteral","Button2","button","_templateObject2","Navigation","_ref","logout","currentUser","useContext","createElement","Link","to","NavLink","onClick","first_name","username","Homepage","className","firstName","Alert","type","messages","concat","role","map","error","LoginForm","login","history","useHistory","formData","setFormData","password","formErrors","setFormErrors","async","handleSubmit","evt","preventDefault","result","success","push","errors","handleChange","name","value","target","l","onSubmit","onChange","autoComplete","required","BASE_URL","process","REACT_APP_BASE_URL","RedboxApi","endpoint","data","method","url","headers","Authorization","token","params","axios","err","response","message","Array","isArray","this","request","user","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","f","updatedUser","profileData","saveProfile","SignupForm","signup","PrivateRoute","exact","path","children","Route","Redirect","MovieDetail","description","programType","entry","setEntry","entries","title","useParams","useCallback","arr","v","filter","MovieCard","width","height","alt","src","MovieList","movies","setMovies","Fragment","m","images","Routes","register","Switch","LoadingSpinner","Header","Button","defaultProps","theme","main","Main","App","infoLoaded","setInfoLoaded","setToken","jwt","decode","getCurrentUser","BrowserRouter","Provider","loginData","signupData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d3aefcb1.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n// import \"./Navigation.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\"\n\n/** Navigation bar for site. Shows up on every page.\n *\n * When user is logged in, shows links to main areas of site. When not,\n * shows link to Login and Signup forms.\n *\n * Rendered by App.\n */\nconst FeatureWrapper = styled.nav`\n\nwidth: 100%;\nheight:70px;\nbackground-color: black;\ndisplay: flex;\njustify-content: right;\nflex-direction: column;\nalign-items: right;\n\n`;\n\nconst Button2 = styled.button`\n  font-size: .8em;\n  margin: .5em;\n  padding: 0.25em .75em;\n  \n  border-radius: 13px;\n  color: pink;\n  border: 2px solid lightblue;\n  background-color: black;\n`\n\nfunction Navigation({ logout }) {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  function loggedInNav() {\n    return (\n      \n        \n          <div >\n            <NavLink to=\"/\">\n              <Button2>Home</Button2>\n            </NavLink>\n   \n          <NavLink to=\"/movies\" >\n            <Button2>Movies</Button2>\n          </NavLink>\n      \n        \n          <NavLink to=\"/series\" >\n            <Button2>Series</Button2>\n          </NavLink>\n  \n      \n            <NavLink to=\"/profile\">\n              <Button2>Profile</Button2>\n            </NavLink>\n      \n            <NavLink to=\"/\" onClick={logout}>\n              <Button2>Log out {currentUser.first_name || currentUser.username}</Button2>\n            </NavLink>\n          </div>\n     \n    );\n  }\n\n  function loggedOutNav() {\n    return (\n      <div>\n        <NavLink to=\"/login\">\n          <Button2>Login</Button2>\n        </NavLink>\n\n        <NavLink to=\"/signup\">\n          <Button2>Signup</Button2>\n        </NavLink>\n      </div>\n    \n    );\n  }\n\n  return (\n    <FeatureWrapper>\n      <nav >\n        <Link to=\"/\">\n          RedCube\n        </Link>\n        {currentUser ? loggedInNav() : loggedOutNav()}\n      </nav>\n    </FeatureWrapper>\n  );\n}\n\nexport default Navigation;\n","import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Homepage.css\";\nimport UserContext from \"../auth/UserContext\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n/** Homepage of site.\n *\n * Shows welcome message or login/register buttons.\n *\n * Routed at /\n *\n * Routes -> Homepage\n */\n\nfunction Homepage() {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\n\n  return (\n      <div className=\"Homepage\">\n        <div className=\"container text-center\">\n          <h1 className=\"mb-4 font-weight-bold\">Redcube</h1>\n          <p className=\"lead\">All the titles in one, convenient place.</p>\n          {currentUser\n              ? <h2>\n                Welcome Back, {currentUser.firstName || currentUser.username}!\n              </h2>\n              : (\n                  <p>\n          <NavLink to=\"/login\" >\n            <button>Login</button>\n          </NavLink>\n          <NavLink to=\"/signup\" >\n            <button>Signup</button>\n          </NavLink>\n                  </p>\n              )}\n        </div>\n      </div>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\n\n/** Presentational component for showing bootstrap-style alerts.\n *\n * { LoginForm, SignupForm, ProfileForm } -> Alert\n **/\n\nfunction Alert({ type = \"danger\", messages = [] }) {\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\n\n  return (\n      <div className={`alert alert-${type}`} role=\"alert\">\n        {messages.map(error => (\n            <p className=\"mb-0 small\" key={error}>\n              {error}\n            </p>\n        ))}\n      </div>\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\nimport styled from \"styled-components\"\n\n\n/** Login form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls login function prop\n * - redirects to /companies route\n*\n* Routes -> LoginForm -> Alert\n* Routed as /login\n*/\n\nconst Button2 = styled.button`\n  font-size: .1em;\n  margin: .5em;\n  padding: 0.25em .75em;\n  \n  border-radius: 13px;\n  color: pink;\n  border: 2px solid lightblue;\n  background-color: black;\n`\n\nfunction LoginForm({ login }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"LoginForm\",\n      \"login=\", typeof login,\n      \"formData=\", formData,\n      \"formErrors\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(l => ({ ...l, [name]: value }));\n  }\n\n  return (\n      <div className=\"LoginForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h3 className=\"mb-3\">Log In</h3>\n\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                      autoComplete=\"username\"\n                      required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      autoComplete=\"current-password\"\n                      required\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n\n                <button\n                  \n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default LoginForm;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass RedboxApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${RedboxApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default RedboxApi;\n","import React, { useState, useContext } from \"react\";\nimport Alert from \"../common/Alert\";\nimport RedboxApi from \"../api/api\";\nimport UserContext from \"../auth/UserContext\";\n// eslint-disable-next-line\nimport useTimedMessage from \"../hooks/useTimedMessage\";\n\n/** Profile editing form.\n *\n * Displays profile form and handles changes to local form state.\n * Submitting the form calls the API to save, and triggers user reloading\n * throughout the site.\n *\n * Confirmation of a successful save is normally a simple <Alert>, but\n * you can opt-in to our fancy limited-time-display message hook,\n * `useTimedMessage`, but switching the lines below.\n *\n * Routed as /profile\n * Routes -> ProfileForm -> Alert\n */\n\nfunction ProfileForm() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  // switch to use our fancy limited-time-display message hook\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n  // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\n\n  console.debug(\n      \"ProfileForm\",\n      \"currentUser=\", currentUser,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n      \"saveConfirmed=\", saveConfirmed,\n  );\n\n  /** on form submit:\n   * - attempt save to backend & report any errors\n   * - if successful\n   *   - clear previous error messages and password\n   *   - show save-confirmed message\n   *   - set current user info throughout the site\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await RedboxApi.saveProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormData(f => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    // trigger reloading of user information throughout the site\n    setCurrentUser(updatedUser);\n  }\n\n  /** Handle form data changing */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(f => ({\n      ...f,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  }\n\n  return (\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h3>Profile</h3>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <p className=\"form-control-plaintext\">{formData.username}</p>\n              </div>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input\n                    name=\"firstName\"\n                    className=\"form-control\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last Name</label>\n                <input\n                    name=\"lastName\"\n                    className=\"form-control\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    name=\"email\"\n                    className=\"form-control\"\n                    value={formData.email}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Confirm password to make changes:</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    value={formData.password}\n                    onChange={handleChange}\n                />\n              </div>\n\n              {formErrors.length\n                  ? <Alert type=\"danger\" messages={formErrors} />\n                  : null}\n\n              {saveConfirmed\n                  ?\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                  : null}\n\n              <button className=\" btn-btn-secondary\" onClick={handleSubmit}>\n                 Save Changes\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default ProfileForm;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Signup form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls signup function prop\n * - redirects to /companies route\n *\n * Routes -> SignupForm -> Alert\n * Routed as /signup\n */\n\nfunction SignupForm({ signup }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"SignupForm\",\n      \"signup=\", typeof signup,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await signup(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(data => ({ ...data, [name]: value }));\n  }\n\n  return (\n      <div className=\"SignupForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h2 className=\"mb-3\">Sign Up</h2>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label>First name</label>\n                  <input\n                      name=\"firstName\"\n                      className=\"form-control\"\n                      value={formData.firstName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last name</label>\n                  <input\n                      name=\"lastName\"\n                      className=\"form-control\"\n                      value={formData.lastName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control\"\n                      value={formData.email}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null\n                }\n\n                <button\n             \n                    type=\"submit\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default SignupForm;","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n\n/** \"Higher-Order Component\" for private routes.\n *\n * In routing component, use these instead of <Route ...>. This component\n * will check if there is a valid current user and only continues to the\n * route if so. If no user is present, redirects to login form.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n      \"PrivateRoute\",\n      \"exact=\", exact,\n      \"path=\", path,\n      \"currentUser=\", currentUser,\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n      <Route exact={exact} path={path}>\n        {children}\n      </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React, { useCallback, useEffect, useState } from \"react\";\n// import { v4 as uuidv4 } from 'uuid';\n// import MovieContext from \"./MovieContext\";\nimport { useParams } from \"react-router-dom\"\nimport {entries} from '../sample.json'\n\n\nconst MovieDetail = ({description, programType}) => {\n\n    const [entry, setEntry] = useState(entries)\n    console.debug(\"Entry\", entry)\n    console.debug(\"Entries\", entries)\n\n    // const {description, programType, images} = entries\n\n\n    const title = useParams()\n    console.debug(\"Title\", title)\n    // const movies  = useContext(MovieContext)\n    // console.debug(\"Movies=\", movies)\n\n    useEffect(\n        () => {\n            const entry = entries[title] === title ? entries[title] : title\n            setEntry(entry)\n            console.debug(\"Entry=\", entry)\n        }, [title]\n    )\n\n    useCallback(\n        () => {\n            const arr = entries.map(v => v).filter(v => v.title === title)\n            setEntry(arr)\n            console.debug(\"Arr=\", arr)\n        }, [title]\n    )\n\n    return (\n        <div>\n            \n            <p>{entry.title}</p>\n            <p>{entry.description}</p>\n            <p>{description}</p>\n            <p>{entry.programType}</p>\n        </div>\n    )\n}\n\nexport default MovieDetail;","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport './MovieList.css'\n\nconst MovieCard = ({title, description, programType, url, width, height}) => {\n    console.debug(\"moviecard\", title, description)\n\n    return (\n            <Link to={`/movies/${title}`} className='MovieList'\n            >\n                <img alt={description} src={`${url}`} width={`${width}px`} height={`${height}px`}\n                title={title} description={description} programType={programType}\n                 />\n            </Link>\n    )\n}\n\nexport default MovieCard;","import React from 'react'\nimport { useState, useEffect } from 'react';\nimport {entries} from \"../sample.json\"\nimport MovieCard from './MovieCard'\n\nconst MovieList = ({type}) => {\n\n    const [movies, setMovies] = useState([])\n    console.debug(\"Movies=\", movies)\n    console.debug(\"Entries=\", entries)\n    console.debug(\"Type=\", type)\n\n    useEffect(\n        () => {\n            const movies = entries.filter(v => v.programType !== type)\n            setMovies(movies)\n        }, [type]\n    )\n\n    return (\n        <>\n\n{movies.length\n            ? (\n                <div >\n                  {movies.map(m => (\n                 \n                      <MovieCard\n                          title={m.title}\n                          description={m.description}\n                          programType={m.programType}\n                          url={m.images.url}\n                          width={m.images.width}\n                          height={m.images.height}\n                      />\n                     \n                  ))}\n                </div>\n            ) : (\n                <p className=\"lead\">Sorry, no results were found!</p>\n            )}\n            <MovieCard \n            />\n        </>\n    )\n}\n\nexport default MovieList;","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\n// import Home from './Home'\nimport LoginForm from \"../auth/LoginForm\";\nimport ProfileForm from \"../profiles/ProfileForm\";\nimport SignupForm from \"../auth/SignupForm\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport MovieDetail from '../movies/MovieDetail'\nimport MovieList from '../movies/MovieList';\n// import NotFound from './NotFound'\n\n/** Site-wide routes.\n *\n * Parts of site should only be visitable when logged in. Those routes are\n * wrapped by <PrivateRoute>, which is an authorization component.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\n      \"Routes\",\n      `login=${typeof login}`,\n      `register=${typeof register}`,\n  );\n\n  return (\n      <div className=\"pt-5\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <LoginForm login={login} />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupForm signup={signup} />\n          </Route>\n\n          <PrivateRoute exact path=\"/movies\">\n            <MovieList type=\"movies\"/>\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/movies/:title\">\n            <MovieDetail />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/series\">\n            <MovieList type=\"series\" />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/profile\">\n            <ProfileForm />\n          </PrivateRoute>\n\n          <Redirect to=\"/\" />\n          {/* <Route><NotFound /></Route> */}\n        </Switch>\n      </div>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n  return (\n      <div className=\"LoadingSpinner\">\n        Loading ...\n      </div>\n  );\n}\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport RedboxApi from \"./api/api\";\nimport styled from 'styled-components'\nimport { Button } from 'react-foundation';\nimport \"./App.css\"\n\nconst Header = styled.nav`\n    color: lightblue;\n    background-color: black;\n    font-size: 40px;\n    display: flex;\njustify-content: left;\nalign-items: left;\n`\nButton.defaultProps = {\n  theme: {\n    main: \"#BF4F74\"\n  }\n}\n\n\nconst Main = styled.main`\nbackground-color: lightgrey;\n// width: auto;\nheight: 75vw;\ndisplay: flew\n`\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"redbox-token\";\n\n/** Redbox application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n*\n* - currentUser: user obj from API. This becomes the canonical way to tell\n*   if someone is logged in. This is passed around via context throughout app.\n*\n* - token: for logged in users, this is their authentication JWT.\n*   Is required to be set for most API calls. This is initially read from\n*   localStorage and synced to there via the useLocalStorage hook.\n*\n* App -> Routes\n*/\nfunction App() {\n\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          RedboxApi.token = token;\n          let currentUser = await RedboxApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n/** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\nasync function signup(signupData) {\n  try {\n    let token = await RedboxApi.signup(signupData);\n    setToken(token);\n    return { success: true };\n  } catch (errors) {\n    console.error(\"signup failed\", errors);\n    return { success: false, errors };\n  }\n}\n\n/** Handles site-wide login.\n *\n * Make sure you await this function and check its return value!\n */\nasync function login(loginData) {\n  try {\n    let token = await RedboxApi.login(loginData);\n    setToken(token);\n    return { success: true };\n  } catch (errors) {\n    console.error(\"login failed\", errors);\n    return { success: false, errors };\n  }\n}\n\nif (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <div>\n      <BrowserRouter>\n        <UserContext.Provider\n          value={{ currentUser, setCurrentUser }}>  \n          <Navigation logout={logout} />\n            <Header>Popular Selections</Header>\n              <Main>\n                <Routes login={login} signup={signup} />\n              </Main> \n        </UserContext.Provider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}